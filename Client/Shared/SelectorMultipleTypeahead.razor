@typeparam T

<CustomTypeahead SearchMethod="@((string value) => SearchMethod(value))"
                 Value="@sampleItem"
                 ValueChanged="@((T item) => ItemSelect(item))">
    <ResultTemplate>
        @MyResultTemplate(context)
    </ResultTemplate>
</CustomTypeahead>

<ul class="list-group">
    @foreach (var item in SelectedItems)
    {
        <li draggable="true"
            @ondragstart="@(() => HandleDragStart(item))"
            @ondragover="@(() => HandleDragOver(item))"
            class="list-group-item list-group-item-action">
            @MyListTemplate(item)
            <span @onclick="@(() => SelectedItems.Remove(item))"
                  class="badge badge-primary badge-pill"
                  style="cursor: pointer">X</span>
        </li>
    }
</ul>

@code {
    [Parameter] public List<T> SelectedItems { get; set; } = new List<T>();
    [Parameter] public Func<string, Task<IEnumerable<T>>> SearchMethod { get; set; }
    [Parameter] public RenderFragment<T> MyResultTemplate { get; set; }
    [Parameter] public RenderFragment<T> MyListTemplate { get; set; }
    T sampleItem = default(T);
    T itemSwpied;

    private void HandleDragStart(T item)
    {
        itemSwpied = item;
    }

    private void HandleDragOver(T item)
    {
        if (!item.Equals(itemSwpied))
        {
            var indexItemSwiped = SelectedItems.IndexOf(itemSwpied);
            var indexItem = SelectedItems.IndexOf(item);
            SelectedItems[indexItem] = itemSwpied;
            SelectedItems[indexItemSwiped] = item;
        }
    }

    private void ItemSelect(T item)
    {
        if (!SelectedItems.Any(x => x.Equals(item)))
        {
            SelectedItems.Add(item);
        }
        sampleItem = default(T);
    }
}